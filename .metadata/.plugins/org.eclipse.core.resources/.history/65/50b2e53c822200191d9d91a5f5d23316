#include <bits/stdc++.h>

using namespace std;
map<int, vector<int>> graph;
map<int, int> determined;
vector<bool> visited;

int helper(int i, vector<vector<int>> tmp){
	int product = 1;

	for(auto j : tmp){
		product *= j[i];
	}

	return product;
}

vector<int> DFS(int u){
	cout << u << ": ";
	vector<int> answer (3, 0);
	visited[u] = true;

	if(determined.find(u) != determined.end()){
		answer[determined[u]] = 1;
		return answer;
	}

	vector<vector<int>> tmp;

	for(int v : graph[u]){
		if(visited[v]) continue;
		tmp.push_back(DFS(v));
	}

	for(int i = 0; i < 3; i++){
		answer[i] = helper(i, tmp);
		cout << answer[i] << " ";
	}
	cout << endl;

	return answer;
}

int main(){
	int N, K;
	cin >> N >> K;

	for(int i = 0; i < N - 1; i++){
		int u, v;
		cin >> u >> v;

		graph[u - 1].push_back(v - 1);
		graph[v - 1].push_back(u - 1);
	}

//	for(auto i : graph){
//		cout << i.first << ": ";
//
//		for(auto j : i.second){
//			cout << j << ", ";
//		}
//		cout << endl;
//	}

	visited.assign(N, false);
	vector<int> vec = DFS(0);

	int sum = 0;

	for(int i : vec){
		cout << i << " ";
		sum += i;
	}

	cout << endl;
	cout << sum;

	return 0;
}
